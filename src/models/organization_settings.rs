/*
 * Clerk Backend API
 *
 * The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrganizationSettings {
	/// String representing the object's type. Objects of the same type share the same value.
	#[serde(rename = "object")]
	pub object: Object,
	#[serde(rename = "enabled")]
	pub enabled: bool,
	#[serde(rename = "max_allowed_memberships")]
	pub max_allowed_memberships: i64,
	#[serde(rename = "max_allowed_roles", skip_serializing_if = "Option::is_none")]
	pub max_allowed_roles: Option<i64>,
	#[serde(rename = "max_allowed_permissions", skip_serializing_if = "Option::is_none")]
	pub max_allowed_permissions: Option<i64>,
	/// The role key that a user will be assigned after creating an organization.
	#[serde(rename = "creator_role")]
	pub creator_role: String,
	/// The default for whether an admin can delete an organization with the Frontend API.
	#[serde(rename = "admin_delete_enabled")]
	pub admin_delete_enabled: bool,
	#[serde(rename = "domains_enabled")]
	pub domains_enabled: bool,
	#[serde(rename = "domains_enrollment_modes")]
	pub domains_enrollment_modes: Vec<DomainsEnrollmentModes>,
	/// The role key that it will be used in order to create an organization invitation or suggestion.
	#[serde(rename = "domains_default_role")]
	pub domains_default_role: String,
	/// The model currently selected for the organization.
	#[serde(rename = "selected_model", skip_serializing_if = "Option::is_none")]
	pub selected_model: Option<String>,
	/// Available models that can be selected for the organization.
	#[serde(rename = "available_models", skip_serializing_if = "Option::is_none")]
	pub available_models: Option<Vec<String>>,
}

impl OrganizationSettings {
	pub fn new(
		object: Object,
		enabled: bool,
		max_allowed_memberships: i64,
		creator_role: String,
		admin_delete_enabled: bool,
		domains_enabled: bool,
		domains_enrollment_modes: Vec<DomainsEnrollmentModes>,
		domains_default_role: String,
	) -> OrganizationSettings {
		OrganizationSettings {
			object,
			enabled,
			max_allowed_memberships,
			max_allowed_roles: None,
			max_allowed_permissions: None,
			creator_role,
			admin_delete_enabled,
			domains_enabled,
			domains_enrollment_modes,
			domains_default_role,
			selected_model: Some(ModelType::default_model()),
			available_models: Some(ModelType::all_models()),
		}
	}
	
	/// Sets the selected model for the organization
	pub fn with_selected_model(mut self, model: &str) -> Self {
		self.selected_model = Some(model.to_string());
		self
	}
	
	/// Gets the currently selected model, or returns the default if none is set
	pub fn get_selected_model(&self) -> String {
		self.selected_model.clone().unwrap_or_else(ModelType::default_model)
	}
	
	/// Gets the list of available models, or returns all models if none are set
	pub fn get_available_models(&self) -> Vec<String> {
		self.available_models.clone().unwrap_or_else(ModelType::all_models)
	}
}

/// String representing the object's type. Objects of the same type share the same value.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
	#[serde(rename = "organization_settings")]
	OrganizationSettings,
}

impl Default for Object {
	fn default() -> Object {
		Self::OrganizationSettings
	}
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DomainsEnrollmentModes {
	#[serde(rename = "manual_invitation")]
	ManualInvitation,
	#[serde(rename = "automatic_invitation")]
	AutomaticInvitation,
	#[serde(rename = "automatic_suggestion")]
	AutomaticSuggestion,
}

impl Default for DomainsEnrollmentModes {
	fn default() -> DomainsEnrollmentModes {
		Self::ManualInvitation
	}
}

/// Available AI models that can be selected for an organization
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ModelType {
	#[serde(rename = "gpt-3.5-turbo")]
	Gpt35Turbo,
	#[serde(rename = "gpt-4")]
	Gpt4,
	#[serde(rename = "gpt-4-turbo")]
	Gpt4Turbo,
	#[serde(rename = "claude-3-opus")]
	Claude3Opus,
	#[serde(rename = "claude-3-sonnet")]
	Claude3Sonnet,
	#[serde(rename = "claude-3-haiku")]
	Claude3Haiku,
}

impl Default for ModelType {
	fn default() -> Self {
		Self::Gpt35Turbo
	}
}

impl ModelType {
	/// Get a string representation of the model type
	pub fn as_str(&self) -> &'static str {
		match self {
			ModelType::Gpt35Turbo => "gpt-3.5-turbo",
			ModelType::Gpt4 => "gpt-4",
			ModelType::Gpt4Turbo => "gpt-4-turbo",
			ModelType::Claude3Opus => "claude-3-opus",
			ModelType::Claude3Sonnet => "claude-3-sonnet",
			ModelType::Claude3Haiku => "claude-3-haiku",
		}
	}
	
	/// Get all available models as string values
	pub fn all_models() -> Vec<String> {
		vec![
			ModelType::Gpt35Turbo.as_str().to_string(),
			ModelType::Gpt4.as_str().to_string(),
			ModelType::Gpt4Turbo.as_str().to_string(),
			ModelType::Claude3Opus.as_str().to_string(),
			ModelType::Claude3Sonnet.as_str().to_string(),
			ModelType::Claude3Haiku.as_str().to_string(),
		]
	}
	
	/// Get the default model
	pub fn default_model() -> String {
		ModelType::Gpt35Turbo.as_str().to_string()
	}
}
