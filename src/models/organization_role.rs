/*
 * Clerk Backend API
 *
 * The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};
use std::fmt;
use std::str::FromStr;

/// OrganizationRole represents the possible roles a user can have within an organization
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrganizationRole {
    #[serde(rename = "admin")]
    Admin,
    #[serde(rename = "member")]
    Member,
    #[serde(rename = "owner")]
    Owner,
    #[serde(rename = "guest")]
    Guest,
    #[serde(other)]
    Unknown,
}

impl Default for OrganizationRole {
    fn default() -> Self {
        Self::Member
    }
}

impl FromStr for OrganizationRole {
    type Err = ();

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s.to_lowercase().as_str() {
            "admin" => Ok(Self::Admin),
            "member" => Ok(Self::Member),
            "owner" => Ok(Self::Owner),
            "guest" => Ok(Self::Guest),
            _ => Ok(Self::Unknown),
        }
    }
}

impl fmt::Display for OrganizationRole {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            OrganizationRole::Admin => write!(f, "admin"),
            OrganizationRole::Member => write!(f, "member"),
            OrganizationRole::Owner => write!(f, "owner"),
            OrganizationRole::Guest => write!(f, "guest"),
            OrganizationRole::Unknown => write!(f, "unknown"),
        }
    }
}