/*
 * Clerk Backend API
 *
 * The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateEmailRequest {
	/// The email name portion of the sending email address. <br/>e.g.: `from_email_name=info` will send from info@example.com
	#[serde(rename = "from_email_name", skip_serializing_if = "Option::is_none")]
	pub from_email_name: Option<String>,
	/// The subject of the email.
	#[serde(rename = "subject", skip_serializing_if = "Option::is_none")]
	pub subject: Option<String>,
	/// The body of the email.
	#[serde(rename = "body", skip_serializing_if = "Option::is_none")]
	pub body: Option<String>,
	/// The ID of the email address to send to.
	#[serde(
		rename = "email_address_id",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub email_address_id: Option<Option<String>>,
}

impl CreateEmailRequest {
	pub fn new() -> CreateEmailRequest {
		CreateEmailRequest {
			from_email_name: None,
			subject: None,
			body: None,
			email_address_id: None,
		}
	}

	/// Validates the email request to ensure required fields are present and valid.
	/// Returns a Result with an error message if validation fails.
	pub fn validate(&self) -> Result<(), String> {
		// Validate subject (required for meaningful email)
		if let Some(subject) = &self.subject {
			if subject.trim().is_empty() {
				return Err("Email subject cannot be empty".to_string());
			}
		} else {
			return Err("Email subject is required".to_string());
		}

		// Validate body (required for meaningful email)
		if let Some(body) = &self.body {
			if body.trim().is_empty() {
				return Err("Email body cannot be empty".to_string());
			}
		} else {
			return Err("Email body is required".to_string());
		}

		// Validate email_address_id (required for delivery)
		if let Some(email_address_id_opt) = &self.email_address_id {
			if let Some(email_address_id) = email_address_id_opt {
				if email_address_id.trim().is_empty() {
					return Err("Email address ID cannot be empty".to_string());
				}
			} else {
				return Err("Email address ID is required".to_string());
			}
		} else {
			return Err("Email address ID is required".to_string());
		}

		// All validations passed
		Ok(())
	}

	/// Checks if the email request is valid without providing detailed error messages.
	/// Returns true if the request is valid, false otherwise.
	pub fn is_valid(&self) -> bool {
		self.validate().is_ok()
	}
}
