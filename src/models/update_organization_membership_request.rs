/*
 * Clerk Backend API
 *
 * The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 * Generated by: https://openapi-generator.tech
 */

use std::fmt;
use std::error::Error;

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateOrganizationMembershipRequest {
	/// The new role of the given membership.
	#[serde(rename = "role")]
	pub role: String,
}

#[derive(Debug, Clone)]
pub struct ValidationError {
    message: String,
}

impl ValidationError {
    pub fn new<T: Into<String>>(message: T) -> Self {
        ValidationError {
            message: message.into(),
        }
    }
}

impl fmt::Display for ValidationError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "Validation error: {}", self.message)
    }
}

impl Error for ValidationError {}

impl UpdateOrganizationMembershipRequest {
	/// Creates a new UpdateOrganizationMembershipRequest with validation for allowed roles.
	/// 
	/// # Arguments
	/// * `role` - The role to assign to the organization membership. Must be one of: "admin", "member", or "basic_member".
	/// 
	/// # Returns
	/// * `Result<UpdateOrganizationMembershipRequest, ValidationError>` - Returns the request if valid, or a ValidationError if invalid.
	pub fn new(role: String) -> Result<UpdateOrganizationMembershipRequest, ValidationError> {
		let allowed_roles = vec!["admin", "member", "basic_member"];
		
		if allowed_roles.contains(&role.as_str()) {
			Ok(UpdateOrganizationMembershipRequest { role })
		} else {
			Err(ValidationError::new(format!(
				"Invalid role '{}'. Allowed roles are: {}", 
				role, 
				allowed_roles.join(", ")
			)))
		}
	}

	/// Creates a new UpdateOrganizationMembershipRequest without validation.
	/// 
	/// # Arguments
	/// * `role` - The role to assign to the organization membership.
	/// 
	/// # Warning
	/// This method bypasses validation. Use `new` instead when possible.
	pub fn new_unchecked(role: String) -> UpdateOrganizationMembershipRequest {
		UpdateOrganizationMembershipRequest { role }
	}
}
