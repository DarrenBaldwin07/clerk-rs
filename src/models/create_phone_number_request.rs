/*
 * Clerk Backend API
 *
 * The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::validators::phone::is_valid_e164;
use thiserror::Error;

#[derive(Error, Debug)]
pub enum CreatePhoneNumberError {
    #[error("Invalid phone number: {0}. Must adhere to E.164 format (e.g., +12025550123)")]
    InvalidPhoneNumber(String),
    #[error("User ID cannot be empty")]
    EmptyUserId,
}

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreatePhoneNumberRequest {
	/// The ID representing the user
	#[serde(rename = "user_id", skip_serializing_if = "Option::is_none")]
	pub user_id: Option<String>,
	/// The new phone number. Must adhere to the E.164 standard for phone number format.
	#[serde(rename = "phone_number", skip_serializing_if = "Option::is_none")]
	pub phone_number: Option<String>,
	/// When created, the phone number will be marked as verified.
	#[serde(
		rename = "verified",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub verified: Option<Option<bool>>,
	/// Create this phone number as the primary phone number for the user. Default: false, unless it is the first phone number.
	#[serde(
		rename = "primary",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub primary: Option<Option<bool>>,
}

impl CreatePhoneNumberRequest {
	pub fn new() -> CreatePhoneNumberRequest {
		CreatePhoneNumberRequest {
			user_id: None,
			phone_number: None,
			verified: None,
			primary: None,
		}
	}

    /// Validates the request data to ensure:
    /// 1. If user_id is provided, it's not empty
    /// 2. If phone_number is provided, it adheres to E.164 format
    pub fn validate(&self) -> Result<(), CreatePhoneNumberError> {
        // Validate user_id is not empty if provided
        if let Some(user_id) = &self.user_id {
            if user_id.trim().is_empty() {
                return Err(CreatePhoneNumberError::EmptyUserId);
            }
        }

        // Validate phone_number follows E.164 format if provided
        if let Some(phone) = &self.phone_number {
            if !is_valid_e164(phone) {
                return Err(CreatePhoneNumberError::InvalidPhoneNumber(phone.clone()));
            }
        }

        Ok(())
    }
}
