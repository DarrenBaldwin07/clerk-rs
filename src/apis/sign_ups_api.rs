/*
 * Clerk Backend API
 *
 * The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::Error;
use crate::{apis::ResponseContent, clerk::Clerk};
use std::error::Error as StdError;
use std::fmt;

/// struct for typed errors of method [`update_sign_up`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateSignUpError {
	Status403(crate::models::ClerkErrors),
	UnknownValue(serde_json::Value),
}

#[derive(Debug)]
pub enum ValidationError {
	EmptyId,
	InvalidId,
}

impl fmt::Display for ValidationError {
	fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
		match self {
			ValidationError::EmptyId => write!(f, "ID cannot be empty"),
			ValidationError::InvalidId => write!(f, "ID format is invalid"),
		}
	}
}

impl StdError for ValidationError {}

pub struct SignUps;

impl SignUps {
	/// Update the sign-up with the given ID
	pub async fn update_sign_up(
		clerk_client: &Clerk,
		id: &str,
		update_sign_up_request: Option<crate::models::UpdateSignUpRequest>,
	) -> Result<crate::models::SignUp, Error<UpdateSignUpError>> {
		// Validate id parameter
		if id.is_empty() {
			return Err(Error::Io(std::io::Error::new(
				std::io::ErrorKind::InvalidInput,
				ValidationError::EmptyId,
			)));
		}

		// Validate id format (assuming it should be alphanumeric)
		if !id.chars().all(|c| c.is_alphanumeric() || c == '_' || c == '-') {
			return Err(Error::Io(std::io::Error::new(
				std::io::ErrorKind::InvalidInput,
				ValidationError::InvalidId,
			)));
		}
		let local_var_configuration = &clerk_client.config;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!("{}/sign_ups/{id}", local_var_configuration.base_path, id = crate::apis::urlencode(id));
		let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}

		// Ensure we're not sending an empty update request
		if let Some(req) = &update_sign_up_request {
			local_var_req_builder = local_var_req_builder.json(req);
		} else {
			// If no update fields are provided, return an error
			return Err(Error::Io(std::io::Error::new(
				std::io::ErrorKind::InvalidInput,
				"Update request cannot be empty",
			)));
		}

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
			serde_json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<UpdateSignUpError> = serde_json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}
}
