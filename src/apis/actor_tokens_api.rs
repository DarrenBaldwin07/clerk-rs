/*
 * Clerk Backend API
 *
 * The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use crate::{clerk::Clerk, error::{ApiError, Error}};

pub struct ActorToken;

impl ActorToken {
	/// Create an actor token that can be used to impersonate the given user.
	pub async fn create(
		clerk_client: &Clerk,
		create_actor_token_request: Option<crate::models::CreateActorTokenRequest>,
	) -> Result<crate::models::ActorToken, Error> {
		let local_var_configuration = &clerk_client.config;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!("{}/actor_tokens", local_var_configuration.base_path);
		let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent);
		}
		local_var_req_builder = local_var_req_builder.json(&create_actor_token_request);

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();

		if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
			local_var_resp.json().await.map_err(Error::from)
		} else {
			let local_var_content = local_var_resp.text().await?;
			let api_error = ApiError::new(local_var_status, local_var_content);
			Err(Error::ApiError(api_error))
		}
	}

	/// Revokes a pending actor token.
	pub async fn revoke(clerk_client: &Clerk, actor_token_id: &str) -> Result<crate::models::ActorToken, Error> {
		let local_var_configuration = &clerk_client.config;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!(
			"{}/actor_tokens/{actor_token_id}/revoke",
			local_var_configuration.base_path,
			actor_token_id = crate::apis::urlencode(actor_token_id)
		);
		let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
			local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
		};

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
			serde_json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let api_error = ApiError::new(local_var_status, local_var_content);
			Err(Error::ApiError(api_error))
		}
	}
}
